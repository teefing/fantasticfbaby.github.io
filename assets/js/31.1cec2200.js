(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{519:function(a,t,n){"use strict";n.r(t);var r=n(3),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"js-自带的-map-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js-自带的-map-方法"}},[a._v("#")]),a._v(" js 自带的 map() 方法")]),a._v(" "),n("h2",{attrs:{id:"_1-方法概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-方法概述"}},[a._v("#")]),a._v(" 1. 方法概述")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v(" map() 方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。\n")])])]),n("h2",{attrs:{id:"_2-例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-例子"}},[a._v("#")]),a._v(" 2. 例子")]),a._v(" "),n("h3",{attrs:{id:"_2-1-在字符串中使用map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-在字符串中使用map"}},[a._v("#")]),a._v(" 2.1 在字符串中使用map###")]),a._v(" "),n("p",[a._v("在一个 String  上使用 map 方法获取字符串中每个字符所对应的 ASCII 码组成的数组：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v('var map = Array.prototype.map\nvar a = map.call("Hello World", function(x) { return x.charCodeAt(0); })\n// a的值为[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]\n')])])]),n("h3",{attrs:{id:"_2-2-易犯错误"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-易犯错误"}},[a._v("#")]),a._v(" 2.2 易犯错误###")]),a._v(" "),n("p",[a._v("通常情况下，map 方法中的 callback 函数只需要接受一个参数（很多时候，自定义的函数形参只有一个），就是正在被遍历的数组元素本身。")]),a._v(" "),n("p",[a._v("但这并不意味着 map 只给 callback 传了一个参数（会传递3个参数）。这个思维惯性可能会让我们犯一个很容易犯的错误。")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v('// 下面的语句返回什么呢:\n["1", "2", "3"].map(parseInt);\n// 你可能觉的会是[1, 2, 3]\n// 但实际的结果是 [1, NaN, NaN]\n\n// 通常使用parseInt时,只需要传递一个参数.但实际上,parseInt可以有两个参数.第二个参数是进制数.可以通过语句"alert(parseInt.length)===2"来验证.\n// map方法在调用callback函数时,会给它传递三个参数:当前正在遍历的元素, 元素索引, 原数组本身.\n// 第三个参数parseInt会忽视, 但第二个参数不会,也就是说,parseInt把传过来的索引值当成进制数来使用.从而返回了NaN.\n\n/*\n//应该使用如下的用户函数returnInt\n\nfunction returnInt(element){\n  return parseInt(element,10);\n}\n\n["1", "2", "3"].map(returnInt);\n// 返回[1,2,3]\n')])])])])}),[],!1,null,null,null);t.default=e.exports}}]);