(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{540:function(n,e,s){"use strict";s.r(e);var _=s(3),t=Object(_.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"普通继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#普通继承"}},[n._v("#")]),n._v(" 普通继承")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("class Parent(object):\n    def __init__(self, name):\n        self.name = name\n\n    def say(self):\n        print('this is %s' % self.name)\n\n\nclass Child(Parent):\n    def __init__(self, name, age):\n        Parent.__init__(self, name)\n        self.age = age\n    def say(self):\n        print('this is %s, his age is %s' % (self.name, self.age))\n\nchild = Child('Bob', 1)\nchild.say()\n")])])]),s("p",[n._v("运行结果")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("this is Bob, his age is 1\n")])])]),s("h1",{attrs:{id:"super-继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#super-继承"}},[n._v("#")]),n._v(" super 继承")]),n._v(" "),s("p",[n._v("修改 Child 类")]),n._v(" "),s("p",[n._v("class Child(Parent):\ndef "),s("strong",[n._v("init")]),n._v("(self, name, age):\nsuper(Child, self)."),s("strong",[n._v("init")]),n._v("(name)\nself.age = age")]),n._v(" "),s("p",[n._v("def say(self):\nprint('this is %s, his age is %s' % (self.name, self.age))")]),n._v(" "),s("p",[n._v("第三行把 Parent 改成了 super(Child, self),并且去掉了后面"),s("code",[n._v("__init__")]),n._v("中的 self,")]),n._v(" "),s("p",[n._v("运行结果与上面是一样的")]),n._v(" "),s("p",[n._v("这里使用了 super， self 会隐式传入 init 中，可是感觉这样写其实有点多余，比较 super 中的 Child 和 self 都是固定的不是吗，每次写都很麻烦")]),n._v(" "),s("p",[n._v("于是，找到了一颗语法糖")]),n._v(" "),s("p",[n._v("直接写 super(), 删除 Child 和 self 也是可行的")]),n._v(" "),s("h1",{attrs:{id:"普通继承和-super-的不同点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#普通继承和-super-的不同点"}},[n._v("#")]),n._v(" 普通继承和 super 的不同点")]),n._v(" "),s("p",[n._v("表面上看 普通继承和 super 继承的结果是一致的，实际上这两种方法的内部处理机制大大不同，当涉及多继承情况时，就会表现出明显的差异来，直接给例子：")]),n._v(" "),s("p",[n._v("代码一：")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('class A:\n    def __init__(self):\n        print("Enter A")\n        print("Leave A")\n\nclass B(A):\n    def __init__(self):\n        print("Enter B")\n        A.__init__(self)\n        print("Leave B")\n\nclass C(A):\n    def __init__(self):\n        print("Enter C")\n        A.__init__(self)\n        print("Leave C")\n\nclass D(A):\n    def __init__(self):\n        print("Enter D")\n        A.__init__(self)\n        print("Leave D")\n\nclass E(B, C, D):\n    def __init__(self):\n        print("Enter E")\n        B.__init__(self)\n        C.__init__(self)\n        D.__init__(self)\n        print("Leave E")\n\nE()\n')])])]),s("p",[n._v("结果：")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("Enter E\nEnter B\nEnter A\nLeave A\nLeave B\nEnter C\nEnter A\nLeave A\nLeave C\nEnter D\nEnter A\nLeave A\nLeave D\nLeave E\n")])])]),s("p",[n._v("执行顺序很好理解，唯一需要注意的是公共父类 A 被执行了多次。")]),n._v(" "),s("p",[n._v("代码二：")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('class A:\n    def __init__(self):\n        print("Enter A")\n        print("Leave A")\n\nclass B(A):\n    def __init__(self):\n        print("Enter B")\n        super(B, self).__init__()\n        print("Leave B")\n\nclass C(A):\n    def __init__(self):\n        print("Enter C")\n        super(C, self).__init__()\n        print("Leave C")\n\nclass D(A):\n    def __init__(self):\n        print("Enter D")\n        super(D, self).__init__()\n        print("Leave D")\n\nclass E(B, C, D):\n    def __init__(self):\n        print("Enter E")\n        super(E, self).__init__()\n        print("Leave E")\n\nE()\n')])])]),s("p",[n._v("结果：")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v("Enter E\nEnter B\nEnter C\nEnter D\nEnter A\nLeave A\nLeave D\nLeave C\nLeave B\nLeave E\n")])])]),s("p",[n._v("在 super 机制里可以保证公共父类仅被执行一次，至于执行的顺序，是按照 mro 进行的"),s("code",[n._v("（E.__mro__）")]),n._v("。")])])}),[],!1,null,null,null);e.default=t.exports}}]);