(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{545:function(t,a,e){"use strict";e.r(a);var v=e(3),s=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/25685-fe696eaf14f60038.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),t._v(" "),e("h2",{attrs:{id:"_1-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[t._v("#")]),t._v(" 1. 简介")]),t._v(" "),e("p",[t._v("Vim（Vi[Improved]）编辑器是功能强大的跨平台文本文件编辑工具，继承自 Unix 系统的 Vi 编辑器，支持 Linux/Mac OS X/Windows 系统，利用它可以建立、修改文本文件。进入 Vim 编辑程序，可以在终端输入下面的命令：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("$vim [filename]\n")])])]),e("p",[t._v("其中"),e("code",[t._v("filename")]),t._v("是要编辑器的文件的路径名。如果文件不存在，它将为你建立一个新文件。Vim 编辑程序有三种操作模式，分别称为 "),e("strong",[t._v("编辑模式")]),t._v("、"),e("strong",[t._v("插入模式")]),t._v(" 和 "),e("strong",[t._v("命令模式")]),t._v("，当运行 Vim 时，首先进入编辑模式。")]),t._v(" "),e("h2",{attrs:{id:"_2-编辑模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-编辑模式"}},[t._v("#")]),t._v(" 2. 编辑模式")]),t._v(" "),e("p",[t._v("Vim 编辑方式的主要用途是在被编辑的文件中移动光标的位置。一旦光标移到到所要的位置，就可以进行剪切和粘贴正文块，删除正文和插入新的正文。当完成所有的编辑工作后，需要保存编辑器结果，退出编辑程序回到终端，可以发出"),e("code",[t._v("ZZ")]),t._v("命令，连续按两次大写的"),e("code",[t._v("Z")]),t._v("键。")]),t._v(" "),e("h3",{attrs:{id:"_2-1-跳转"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-跳转"}},[t._v("#")]),t._v(" 2.1 跳转")]),t._v(" "),e("p",[t._v("如果键盘上有上、下、左、右箭头的导航键，就由这些键来完成光标的移动。另外，可以用下面的键完成同样的 "),e("strong",[t._v("按字符移动")]),t._v(" 功能：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("k                上移；\nj                下移；\nh                左移；\nl                右移。\n")])])]),e("p",[t._v("上面这４个键将光标位置每次移动一行或一个 "),e("strong",[t._v("字符")]),t._v(" 。Vim 还提供稍大范围移动光标的命令：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("ctrl+f        在文件中前移一页（相当于 page down）；\nctrl+b        在文件中后移一页（相当于 page up）；\n")])])]),e("p",[t._v("更大范围的移动：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("*          当光标停留在一个单词上，* 键会在文件内搜索该单词，并跳转到下一处；\n#          当光标停留在一个单词上，# 在文件内搜索该单词，并跳转到上一处；\n(/)        移动到 前/后 句 的开始；\n{/}        跳转到 当前/下一个 段落 的开始。\ng_         到本行最后一个不是 blank 字符的位置。\nfa         到下一个为 a 的字符处，你也可以fs到下一个为s的字符。\nt,         到逗号前的第一个字符。逗号可以变成其它字符。\n3fa        在当前行查找第三个出现的 a。\nF/T        和 f 和 t 一样，只不过是相反方向;\ngg         将光标定位到文件第一行起始位置；\nG          将光标定位到文件最后一行起始位置；\nNG或Ngg    将光标定位到第 N 行的起始位置。\n")])])]),e("p",[t._v("在屏幕中找到需要的 "),e("strong",[t._v("一页")]),t._v(" 时，可以用下面的命令快速移动光标：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("H                将光标移到屏幕上的起始行（或最上行）；\nM                将光标移到屏幕中间；\nL                将光标移到屏幕最后一行。\n")])])]),e("p",[t._v("同样需要注意字母的大小写。"),e("code",[t._v("H")]),t._v(" 和 "),e("code",[t._v("L")]),t._v(" 命令还可以加数字。如 "),e("code",[t._v("2H")]),t._v(" 表示将光标移到屏幕的第２行，"),e("code",[t._v("3L")]),t._v(" 表示将光标移到屏幕的倒数第 3 行。\n当将光标移到所要的行是，"),e("strong",[t._v("行内移动")]),t._v(" 光标可以用下面的命令来实现：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("w                右移光标到下一个字的开头；\ne                右移光标到一个字的末尾；\nb                左移光标到前一个字的开头；\n0                数字０，左移光标到本行的开始；\n$                右移光标，到本行的末尾；\n^                移动光标，到本行的第一个非空字符。\n")])])]),e("h3",{attrs:{id:"_2-2-搜索匹配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-搜索匹配"}},[t._v("#")]),t._v(" 2.2 搜索匹配")]),t._v(" "),e("p",[t._v("和许多先进的编辑器一样，Vim 提供了强大的字符串搜索功能。要查找文件中指定字或短语出现的位置，可以用 Vim 直接进行搜索，而不必以手工方式进行。搜索方法是：键入字符 "),e("code",[t._v("/")]),t._v(" ，后面跟以要搜索的字符串，然后按回车键。编辑程序执行正向搜索（即朝文件末尾方向），并在找到指定字符串后，将光标停到该字符串的开头；键入 "),e("code",[t._v("n")]),t._v(" 命令可以继续执行搜索，找出这一字符串下次出现的位置。用字符 "),e("code",[t._v("?")]),t._v(" 取代 "),e("code",[t._v("/")]),t._v(" ，可以实现反向搜索（朝文件开头方向）。例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("/str1                正向搜索字符串 str1；\nn                    继续搜索，找出 str1 字符串下次出现的位置；\nN                    继续搜索，找出 str1 字符串上一次出现的位置；\n?str2                反向搜索字符串 str2 。\n")])])]),e("p",[t._v("无论搜索方向如何，当到达文件末尾或开头时，搜索工作会循环到文件的另一端并继续执行。\nVim 中执行搜索匹配最强大的地方是结合 "),e("strong",[t._v("正则表达式")]),t._v(" 来搜索，后续将会介绍。")]),t._v(" "),e("h3",{attrs:{id:"_2-3-替换和删除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-替换和删除"}},[t._v("#")]),t._v(" 2.3 替换和删除")]),t._v(" "),e("p",[t._v("Vim 常规的删除命令是 "),e("code",[t._v("d")]),t._v("、 "),e("code",[t._v("x")]),t._v(" (前者删除 "),e("code",[t._v("行")]),t._v(" ，后者删除 "),e("code",[t._v("字符")]),t._v(" ),结合 Vim 的其他特性可以实现基础的删除功能。将光标定位于文件内指定位置后，可以用其他字符来替换光标所指向的字符，或从当前光标位置删除一个或多个字符或一行、多行。例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("rc                 用 c 替换光标所指向的当前字符；\nnrc                用 c 替换光标所指向的前 n 个字符；\n5rA                用 A 替换光标所指向的前 5 个字符；\nx                  删除光标所指向的当前字符；\nnx                 删除光标所指向的前 n 个字符；\n3x                 删除光标所指向的前 3 个字符；\ndw                 删除光标右侧的字；\nndw                删除光标右侧的 n 个字；\n3dw                删除光标右侧的 3 个字；\ndb                 删除光标左侧的字；\nndb                删除光标左侧的 n 个字；\n5db                删除光标左侧的 5 个字；\ndd                 删除光标所在行，并去除空隙；\nndd                删除（剪切） n 行内容，并去除空隙；\n3dd                删除（剪切） 3 行内容，并去除空隙；\n")])])]),e("p",[t._v("其他常用的删除命令有：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("d$                从当前光标起删除字符直到行的结束；\nd0                从当前光标起删除字符直到行的开始；\nJ                 删除本行的回车符（CR），并和下一行合并。\n")])])]),e("p",[t._v("Vim 常规的替换命令有 "),e("code",[t._v("c")]),t._v(" 和 "),e("code",[t._v("s")]),t._v(" ，结合 Vim 的其他特性可以实现基础的替换功能，不过替换命令执行以后，通常会由 "),e("strong",[t._v("编辑模式")]),t._v(" 进入 "),e("strong",[t._v("插入模式")]),t._v(" ：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("s                用输入的正文替换光标所指向的字符；\nS                删除当前行，并进入编辑模式；\nns               用输入的正文替换光标右侧 n 个字符；\nnS               删除当前行在内的 n 行，并进入编辑模式；\ncw               用输入的正文替换光标右侧的字；\ncW               用输入的正文替换从光标到行尾的所有字符（同 c$ )；\nncw              用输入的正文替换光标右侧的 n 个字；\ncb               用输入的正文替换光标左侧的字；\nncb              用输入的正文替换光标左侧的 n 个字；\ncd               用输入的正文替换光标的所在行；\nncd              用输入的正文替换光标下面的 n 行；\nc$               用输入的正文替换从光标开始到本行末尾的所有字符；\nc0               用输入的正文替换从本行开头到光标的所有字符。\n")])])]),e("h3",{attrs:{id:"_2-4-复制粘贴"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-复制粘贴"}},[t._v("#")]),t._v(" 2.4 复制粘贴")]),t._v(" "),e("p",[t._v("从正文中删除的内容（如字符、字或行）并没有真正丢失，而是被剪切并复制到了一个内存缓冲区中。用户可将其粘贴到正文中的指定位置。完成这一操作的命令是：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("p               小写字母 p，将缓冲区的内容粘贴到光标的后面；\nP               大写字母 P，将缓冲区的内容粘贴到光标的前面。\n")])])]),e("p",[t._v("如果缓冲区的内容是字符或字，直接粘贴在光标的前面或后面；如果缓冲区的内容为整行正文，执行上述粘贴命令将会粘贴在当前光标所在行的上一行或下一行。\n注意上述两个命令中字母的大小写。Vim 编辑器经常以一对大、小写字母（如 "),e("code",[t._v("p")]),t._v(" 和 "),e("code",[t._v("P")]),t._v("）来提供一对相似的功能。通常，小写命令在光标的后面进行操作，大写命令在光标的前面进行操作。")]),t._v(" "),e("p",[t._v("有时需要复制一段正文到新位置，同时保留原有位置的内容。这种情况下，首先应当把指定内容复制（而不是剪切）到内存缓冲区。完成这一操作的命令是：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("yy              复制当前行到内存缓冲区；\nnyy             复制 n 行内容到内存缓冲区；\n5yy             复制 5 行内容到内存缓冲区；\n“+y             复制 1 行到操作系统的粘贴板；\n“+nyy           复制 n 行到操作系统的粘贴板。\n")])])]),e("h3",{attrs:{id:"_2-5-撤销和重复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-撤销和重复"}},[t._v("#")]),t._v(" 2.5 撤销和重复")]),t._v(" "),e("p",[t._v("在编辑文档的过程中，为消除某个错误的编辑命令造成的后果，可以用撤消命令。另外，如果用户希望在新的光标位置重复前面执行过的编辑命令，可用重复命令。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("u               撤消前一条命令的结果；\n.               重复最后一条修改正文的命令。\n")])])]),e("h2",{attrs:{id:"_3-插入模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-插入模式"}},[t._v("#")]),t._v(" 3. 插入模式")]),t._v(" "),e("h3",{attrs:{id:"_3-1-进入插入模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-进入插入模式"}},[t._v("#")]),t._v(" 3.1 进入插入模式")]),t._v(" "),e("p",[t._v("在编辑模式下正确定位光标之后，可用以下命令切换到插入模式：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("i            在光标左侧插入正文\na            在光标右侧插入正文\no            在光标所在行的下一行增添新行\nO            在光标所在行的上一行增添新行\nI            在光标所在行的开头插入\nA            在光标所在行的末尾插入\n")])])]),e("h3",{attrs:{id:"_3-2-退出插入模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-退出插入模式"}},[t._v("#")]),t._v(" 3.2 退出插入模式")]),t._v(" "),e("p",[t._v("退出插入模式的方法是，按 "),e("code",[t._v("ESC")]),t._v(" 键或组合键 "),e("code",[t._v("Ctrl+[")]),t._v(" ，退出插入模式之后，将会进入编辑模式 。")]),t._v(" "),e("h2",{attrs:{id:"_4-命令模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-命令模式"}},[t._v("#")]),t._v(" 4. 命令模式")]),t._v(" "),e("p",[t._v("在 Vim 的命令模式下，可以使用复杂的命令。在编辑模式下键入 "),e("code",[t._v(":")]),t._v(" ，光标就跳到屏幕最后一行，并在那里显示冒号，此时已进入命令模式。命令模式又称 "),e("strong",[t._v("末行模式")]),t._v(" ，用户输入的内容均显示在屏幕的最后一行，按回车键，Vim 执行命令。")]),t._v(" "),e("h3",{attrs:{id:"_4-1-打开、保存、退出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-打开、保存、退出"}},[t._v("#")]),t._v(" 4.1 打开、保存、退出")]),t._v(" "),e("p",[t._v("在已经启动的 Vim 中打开一个文件需要用 "),e("strong",[e("code",[t._v(":e")])]),t._v(" 命令：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":e path_to_file/filename\n")])])]),e("p",[t._v("保存当前编辑的文件需要用 "),e("strong",[e("code",[t._v(":w")])]),t._v(" 命令（单词 "),e("code",[t._v("write")]),t._v(" 的缩写）：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":w\n")])])]),e("p",[t._v("将当前文件另存为 "),e("code",[t._v("file_temp")]),t._v(" 则：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":w file_temp\n")])])]),e("p",[t._v("在编辑模式下可以用 "),e("code",[t._v("ZZ")]),t._v(" 命令退出 Vim 编辑程序，该命令保存对正文所作的修改，覆盖原始文件。如果只需要退出编辑程序，而不打算保存编辑的内容，可用下面的命令：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(": q                在未作修改的情况下退出；\n: q!               放弃所有修改，退出编辑程序。\n")])])]),e("p",[t._v("保存并退出则可以讲两条命令结合起来使用（注意命令顺序，先保存，后退出）：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":wq\n")])])]),e("h3",{attrs:{id:"_4-2-行号与文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-行号与文件"}},[t._v("#")]),t._v(" 4.2 行号与文件")]),t._v(" "),e("p",[t._v("编辑中的每一行正文都有自己的行号，用下列命令可以移动光标到指定行（效果与 "),e("strong",[t._v("编辑模式")]),t._v(" 下的 "),e("code",[t._v("ngg")]),t._v(" 或 "),e("code",[t._v("nG")]),t._v(" 相同）：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(": n             将光标移到第 n 行\n")])])]),e("p",[t._v("命令模式下，可以规定命令操作的行号范围。数值用来指定绝对行号；字符“.”表示光标所在行的行号；字符符“$”表示正文最后一行的行号；简单的表达式，例如“.+5”表示当前行往下的第 5 行。例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":345                  将光标移到第 345 行\n:345w file            将第 345 行写入 file 文件\n:3,5w file            将第 3 行至第 5 行写入 file 文件\n:1,.w file            将第 1 行至当前行写入 file 文件\n:.,$w file            将当前行至最后一行写入 file 文件\n:.,.+5w file          从当前行开始将 6 行内容写入 file 文件\n:1,$w file            将所有内容写入 file 文件，相当于 :w file 命令\n")])])]),e("p",[t._v("在命令模式下，允许从文件中读取正文，或将正文写入文件。例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":w                 将编辑的内容写入原始文件，用来保存编辑的中间结果\n:wq                将编辑的内容写入原始文件并退出编辑程序（相当于 ZZ 命令）\n:w file            将编辑的内容写入 file 文件，保持原有文件的内容不变\n:a,bw file         将第 a 行至第 b 行的内容写入 file 文件\n:r file            读取 file 文件的内容，插入当前光标所在行的后面\n:e file            编辑新文件 file 代替原有内容\n:f file            将当前文件重命名为 file\n:f                 打印当前文件名称和状态，如文件的行数、光标所在的行号等\n")])])]),e("h3",{attrs:{id:"_4-3-字符串搜索"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-字符串搜索"}},[t._v("#")]),t._v(" 4.3 字符串搜索")]),t._v(" "),e("p",[t._v("在 "),e("strong",[t._v("编辑模式")]),t._v(" 讲过字符串的搜索，此处的 "),e("strong",[t._v("命令模式")]),t._v(" 也可以进行字符串搜索，给出一个字符串，可以通过搜索该字符串到达指定行。如果希望进行正向搜索，将待搜索的字符串置于两个 "),e("code",[t._v("/")]),t._v(" 之间；如果希望反向搜索，则将字符串放在两个 "),e("code",[t._v("?")]),t._v(" 之间。例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":/str/                  正向搜索，将光标移到下一个包含字符串 str 的行\n:?str?                  反向搜索，将光标移到上一个包含字符串 str 的行\n:/str/w file            正向搜索，并将第一个包含字符串 str 的行写入 file 文件\n:/str1/,/str2/w file    正向搜索，并将包含字符串 str1 的行至包含字符串 str2 的行写\n")])])]),e("h3",{attrs:{id:"_4-4-vim-中的正则表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-vim-中的正则表达式"}},[t._v("#")]),t._v(" 4.4 Vim 中的正则表达式")]),t._v(" "),e("p",[t._v("当给 Vim 指定搜索字符串时，可以包含具有特殊含义的字符。包含这些特殊字符的搜索字符串称为正则表达式（Regular Expressions）。例如，要搜索一行正文，这行正文的开头包含 "),e("code",[t._v("struct")]),t._v(" 字。下面的命令做不到这一点：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":/struct/\n")])])]),e("p",[t._v("因为它只找出在行中任意位置包含 "),e("code",[t._v("struct")]),t._v("的第一行，并不一定在行的开始包含 "),e("code",[t._v("struct")]),t._v(" 。解决问题的办法是在搜索字符串前面加上特殊字符^：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":/^struct/\n")])])]),e("p",[e("code",[t._v("^")]),t._v(" 字符比较每行开头的字符串。所以上面的命令表示：找出以字符串 "),e("code",[t._v("struct")]),t._v(" 开头的行。\n也可以用类似办法在搜索字符串后面加上表示行的末尾的特殊字符 "),e("code",[t._v("$")]),t._v(" 来找出位于行末尾的字：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":/^struct/\n")])])]),e("p",[t._v("下表给出大多数特殊字符和它们的含义：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("^                放在字符串前面，匹配行首的字；\n$                放在字符串后面，匹配行尾的字；\n\\<               匹配一个字的字头；\n\\>               匹配一个字的字尾；\n.                匹配任何单个正文字符；\n[str]            匹配 str 中的任何单个字符；\n[^str]           匹配任何不在 str 中的单个字符；\n[a-b]            匹配 a 到 b 之间的任一字符；\n*                匹配前一个字符的 0 次或多次出现；\n\\                转义后面的字符。\n")])])]),e("p",[t._v("简单介绍这么多，正则表达式知识可以参考\n《正则表达式 30 分钟入门》:"),e("a",{attrs:{href:"http://deerchao.net/tutorials/regex/regex.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://deerchao.net/tutorials/regex/regex.htm"),e("OutboundLink")],1),t._v("\n另外，进阶的 Vim 正则表达式还有对 Magic 模式的介绍，可以参考\n《Vim 正则表达式详解》:\n"),e("a",{attrs:{href:"http://blog.csdn.net/salc3k/article/details/8222397",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://blog.csdn.net/salc3k/article/details/8222397"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"_4-5-正文替换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-正文替换"}},[t._v("#")]),t._v(" 4.5 正文替换")]),t._v(" "),e("p",[t._v("利用 "),e("code",[t._v(":s")]),t._v(" 命令可以实现字符串的替换。具体的用法包括：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":%s/str1/str2/        用字符串 str2 替换行中首次出现的字符串 str1\n:s/str1/str2/g        用字符串 str2 替换行中所有出现的字符串 str1\n:.,$ s/str1/str2/g    用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1\n:1,$ s/str1/str2/g    用字符串 str2 替换正文中所有出现的字符串 str1\n:g/str1/s//str2/g     功能同上\n:m,ns/str1/str2/g     将从m行到n行的str1替换成str2\n")])])]),e("p",[t._v("从上述替换命令可以看到：")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("g")]),t._v(" 放在命令末尾，表示对搜索字符串的每次出现进行替换,不止匹配每行中的第一次出现；不加 "),e("code",[t._v("g")]),t._v("，表示只对搜索字符串的首次出现进行替换；"),e("code",[t._v("g")]),t._v(" 放在命令开头，表示对正文中所有包含搜索字符串的行进行替换操作;")]),t._v(" "),e("li",[e("code",[t._v("s")]),t._v(" 表示后面跟着一串替换的命令；")]),t._v(" "),e("li",[e("code",[t._v("%")]),t._v(" 表示替换范围是所有行，即全文。")])]),t._v(" "),e("p",[t._v("另外一个实用的命令，在 Vim 中统计当前文件中字符串 "),e("code",[t._v("str1")]),t._v(" 出现的次数，可用替换命令的变形：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":%s/str1/&/gn\n")])])]),e("h3",{attrs:{id:"_4-6-删除正文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-删除正文"}},[t._v("#")]),t._v(" 4.6 删除正文")]),t._v(" "),e("p",[t._v("在命令模式下，同样可以删除正文中的内容。例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":d                              删除光标所在行\n:3d                             删除 3 行\n:.,$d                           删除当前行至正文的末尾\n:/str1/,/str2/d                 删除从字符串 str1 到 str2 的所有行\n:g/^\\(.*\\)$\\n\\1$/d              删除连续相同的行，保留最后一行\n:g/\\%(^\\1$\\n\\)\\@<=\\(.*\\)$/d     删除连续相同的行，保留最开始一行\n:g/^\\s*$\\n\\s*$/d                删除连续多个空行，只保留一行空行\n:5,20s/^#//g                    删除5到20行开头的 # 注释\n")])])]),e("p",[t._v("总之，Vim 的初级删除命令是用 "),e("code",[t._v("d")]),t._v(" ，高级删除命令可以用 "),e("strong",[t._v("正则替换")]),t._v(" 的方式执行。")]),t._v(" "),e("h3",{attrs:{id:"_4-7-恢复文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-恢复文件"}},[t._v("#")]),t._v(" 4.7 恢复文件")]),t._v(" "),e("p",[t._v("Vim 在编辑某个文件时，会另外生成一个临时文件，这个文件的名称通常以 "),e("code",[t._v(".")]),t._v(" 开头，并以 "),e("code",[t._v(".swp")]),t._v(" 结尾。Vim 在正常退出时，该文件被删除，若意外退出，而没有保存文件的最新修改内容，则可以使用恢复命令 "),e("code",[t._v(":recover")]),t._v(" 来恢复文件，也可以在启动 Vim 时用 "),e("code",[t._v("-r")]),t._v(" 选项。")]),t._v(" "),e("h3",{attrs:{id:"_4-8-选项设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-选项设置"}},[t._v("#")]),t._v(" 4.8 选项设置")]),t._v(" "),e("p",[t._v("为控制不同的编辑功能，Vim 提供了很多内部选项。利用 "),e("code",[t._v(":set")]),t._v(" 命令可以设置选项。基本语法为：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":set option         设置选项 option\n")])])]),e("p",[t._v("常见的功能选项包括：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("autoindent        设置该选项，则正文自动缩进\nignorecase        设置该选项，则忽略规则表达式中大小写字母的区别\nnumber            设置该选项，则显示正文行号\nruler             设置该选项，则在屏幕底部显示光标所在行、列的位置\ntabstop           设置按 Tab 键跳过的空格数。例如 :set tabstop=n，n 默认值为 8\nmk                将选项保存在当前目录的 .exrc 文件中\n")])])]),e("h3",{attrs:{id:"_4-9-shell-切换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-9-shell-切换"}},[t._v("#")]),t._v(" 4.9 Shell 切换")]),t._v(" "),e("p",[t._v("当处于编辑的对话过程中时，可能需要执行一些 Linux 命令。如果需要保存当前的结果，退出编辑程序，再执行所需的 Linux 命令，然后再回头继续编辑过程，就显得十分累赘。如果能在编辑的环境中运行 Linux 命令就要省事得多。在 Vim 中，可以用下面的命令来做到这一点：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":!shell_command   执行完 shell_command 后回到Vim\n")])])]),e("p",[t._v("这称为 Shell 切换。它允许执行任何可以在标准的 Shell 提示符下执行的命令。当这条命令执行完毕，控制返回给编辑程序。又可以继续编辑对话过程。")]),t._v(" "),e("h3",{attrs:{id:"_4-10-分屏与标签页"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-10-分屏与标签页"}},[t._v("#")]),t._v(" 4.10 分屏与标签页")]),t._v(" "),e("h4",{attrs:{id:"分屏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分屏"}},[t._v("#")]),t._v(" 分屏")]),t._v(" "),e("p",[t._v("普通的 Vim 模式，打开一个 Vim 程序只能查看一个文件，如果想同时查看多个文件，就需要用到 Vim 分屏与标签页功能。\nVim 的分屏，主要有两种方式：上下分屏（水平分屏）和左右分屏（垂直分屏），在命令模式分别敲入以下命令即可：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":split（可用缩写 :sp）            上下分屏；\n:vsplit（可用缩写 :vsp）          左右分屏。\n")])])]),e("p",[t._v("另外，也可以在终端里启动 vim 时就开启分屏操作：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("vim -On file1 file2...   打开 file1 和 file2 ，垂直分屏\nvim -on file1 file2...   打开 file1 和 file2 ，水平分屏\n")])])]),e("p",[t._v("理论上，一个 Vim 窗口，可以分为多个 Vim 屏幕，切换屏幕需要用键盘快捷键，命令分别有：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("Ctrl+w+h            切换到当前分屏的左边一屏；\nCtrl+w+l            切换到当前分屏的右边一屏；\nCtrl+w+j            切换到当前分屏的下方一屏；\nCtrl+w+k            切换到当前分屏的上方一屏。\n")])])]),e("p",[t._v("即键盘上的"),e("code",[t._v("h,j,k,l")]),t._v(" 四个 Vim 专用方向键，配合"),e("code",[t._v("Ctrl")]),t._v("键和"),e("code",[t._v("w")]),t._v("键（"),e("code",[t._v("window")]),t._v("的缩写），就能跳转到目标分屏。另外，也可以直接按 "),e("code",[t._v("Ctrl+w+w")]),t._v(" 来跳转分屏，不过跳转方向则是在当前 Vim 窗口所有分屏中，按照"),e("code",[t._v("逆时针")]),t._v("方向跳转。\n下面是改变尺寸的一些操作，主要是高度，对于宽度你可以使用 "),e("code",[t._v("[Ctrl+W <]")]),t._v(" 或是 "),e("code",[t._v("[Ctrl+W >]")]),t._v(" ，但这可能需要最新的版本才支持。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("Ctrl+W =            让所有的屏都有一样的高度；\nCtrl+W +            增加高度；\nCtrl+W -            减少高度。\n")])])]),e("h4",{attrs:{id:"标签页"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签页"}},[t._v("#")]),t._v(" 标签页")]),t._v(" "),e("p",[t._v("Vim 的标签（Tab）页，类似浏览器的标签页，一个标签页打开一个 Vim 的窗口，一个 Vim 的窗口可以支持 N 个分屏。\n在 Vim 中新建一个标签的命令是：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":tabnew\n")])])]),e("p",[t._v("如果要在新建标签页的同时打开一个文件，则可以在命令后面直接附带文件路径：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":tabnew filename\n")])])]),e("p",[t._v("Vim 中的每个标签页有一个唯一的数字序号，第一个标签页的序号是"),e("code",[t._v("0")]),t._v("，从左向右依次加一。关于标签页有一系列操作命令，简介如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":tN[ext]                跳转到上一个匹配的标签\n:tabN[ext]              跳到上一个标签页\n:tabc[lose]             关闭当前标签页\n:tabdo                  为每个标签页执行命令\n:tabe[dit]              在新标签页里编辑文件\n:tabf[ind]              寻找 'path' 里的文件，在新标签页里编辑之\n:tabfir[st]             转到第一个标签页\n:tabl[ast]              转到最后一个标签页\n:tabm[ove]  N           把标签页移到序号为N位置\n:tabnew [filename]      在新标签页里编辑文件\n:tabn[ext]              转到下一个标签页\n:tabo[nly]              关闭所有除了当前标签页以外的所有标签页\n:tabp[revious]          转到前一个标签页\n:tabr[ewind]            转到第一个标签页\n")])])]),e("h3",{attrs:{id:"_4-11-与外部工具集成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-11-与外部工具集成"}},[t._v("#")]),t._v(" 4.11 与外部工具集成")]),t._v(" "),e("p",[t._v("Vim 可以与许多外部程序集成，功能十分强大，比如 "),e("code",[t._v("diff")]),t._v(" , "),e("code",[t._v("ctags")]),t._v(" , "),e("code",[t._v("sort")]),t._v(" , "),e("code",[t._v("xxd")]),t._v(" 等等，下面选取几个简单介绍一下。")]),t._v(" "),e("h4",{attrs:{id:"diff"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#diff"}},[t._v("#")]),t._v(" diff")]),t._v(" "),e("p",[t._v("Linux 命令 "),e("code",[t._v("diff")]),t._v(" 用来对比两个文件的内容，不过对比结果显示在终端里，可读性比较差。结合 Vim，在终端里可以直接输入命令 "),e("code",[t._v("vimdiff")]),t._v("，后面跟两个文件名作为参数：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("vimdiff file1 file2\n")])])]),e("p",[t._v("即可在 Vim 里分屏显示两个文件内容的对比结果，对文件内容差异部分进行高亮标记，还可以同步滚动两个文件内容，更可以实时修改文件内容，方便程度和用户体验大大提高。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("vimdiff a.txt b.txt\n")])])]),e("p",[t._v("如果直接给 "),e("code",[t._v("-d")]),t._v(" 选项是一样的")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("vim -d a.txt b.txt\n")])])]),e("p",[t._v("除了在终端里开启 vimdiff 功能，也可以在打开 Vim 后，在 Vim 的命令模式输入相关命令来开启 "),e("code",[t._v("vimdiff")]),t._v(" 功能：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":diffsplit abc.txt\n")])])]),e("p",[t._v("如果你现在已经开启了一个文件，想 Vim 帮你区分你的文件跟 "),e("code",[t._v("abc.txt")]),t._v(" 有什么区别，可以在 Vim 中用 "),e("code",[t._v("diffsplit")]),t._v(" 的方式打开第二个文件，这个时 候 Vim 会用 "),e("code",[t._v("split")]),t._v("（分"),e("strong",[t._v("上下")]),t._v("两屏）的方式开启第二个文件，并且通过颜色，"),e("code",[t._v("fold")]),t._v("来显示两个文件的区别\n这样 Vim 就会用颜色帮你区分开 2 个文件的区别。如果文件比较大（源码）重复的部分会帮你折叠起来。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":diffpatch filename\n")])])]),e("p",[t._v("通过 "),e("code",[t._v(":diffpatch")]),t._v(" 你的 patch 的文件名，就可以以当前文件加上你的 patch 来显示。vim 会 split 一个新的屏，显示 patch 后的信息并且用颜色标明区别。\n如果不喜欢上下对比，喜欢左右（比较符合视觉）可以在前面加 "),e("code",[t._v("vert")]),t._v(" ，例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":vert diffsplit abc.txt\n:vert diffpatch abc.txt\n")])])]),e("p",[t._v("看完 diff，用 "),e("code",[t._v(":only")]),t._v(" 回到原本编辑的文件，觉得 diff 的讨厌颜色还是在哪里，只要用 "),e("code",[t._v(":diffoff")]),t._v(" 关闭就好了。\n还有个常用的 diff 中的就是 "),e("code",[t._v(":diffu")]),t._v(" ,这个是 "),e("code",[t._v(":diffupdate")]),t._v(" 的简写，更新的时候用。\nVim 的"),e("code",[t._v("diff")]),t._v("功能显示效果如下所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/25685-478189098173cc17.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),t._v(" "),e("blockquote",[e("p",[t._v("图片来自 "),e("a",{attrs:{href:"http://www.2cto.com/net/201608/536924.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.2cto.com/net/201608/536924.html"),e("OutboundLink")],1)])]),t._v(" "),e("h4",{attrs:{id:"sort"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sort"}},[t._v("#")]),t._v(" sort")]),t._v(" "),e("p",[t._v("Linux 命令 "),e("code",[t._v("sort")]),t._v(" 可以对文本内容进行按行中的字符比较、排序，但在终端里使用 "),e("code",[t._v("sort")]),t._v(" 命令处理文件，并不能实时查看文件内容。具体用法请自查手册。")]),t._v(" "),e("h4",{attrs:{id:"xxd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xxd"}},[t._v("#")]),t._v(" xxd")]),t._v(" "),e("p",[e("code",[t._v("vim+xxd")]),t._v(" 是 Linux 下最常用的二进制文本编辑工具，"),e("code",[t._v("xxd")]),t._v("其实是 Vim 外部的一个转换程序，随 Vim 一起发布，在 Vim 里调用它来编辑二进制文本非常方便。\n首先以二进制模式在终端里打开一个文件：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("vim -b filename\n")])])]),e("p",[t._v("Vim 的 "),e("code",[t._v("-b")]),t._v(" 选项是告诉 Vim 打开的是一个二进制文件，不指定的话，会在后面加上 "),e("code",[t._v("0x0a")]),t._v(" ，即一个换行符。\n然后在 Vim 的命令模式下键入：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":%!xxd\n")])])]),e("p",[t._v("即可看到二进制模式显示出来的文本，看起来像这样：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(" 0000000: 1f8b 0808 39d7 173b 0203 7474 002b 4e49  ....9..;..tt.+NI\n 0000010: 4b2c 8660 eb9c ecac c462 eb94 345e 2e30  K,......b..4^.0\n 0000020: 373b 2731 0b22 0ca6 c1a2 d669 1035 39d9  7;'1.\".....i.59\n")])])]),e("p",[t._v("然后就可以在二进制模式下编辑该文件，编辑后保存，然后用下面命令从二进制模式转换到普通模式：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":%!xxd -r\n")])])]),e("p",[t._v("另外，也可以调整二进制的显示模式，默认是 "),e("strong",[t._v("2")]),t._v(" 个字节为一组，可以通过 "),e("code",[t._v("g")]),t._v(" 参数调整每组字节数：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(":%!xxd -g 1         表示每1个字节为1组\n:%!xxd -g 2         表示每2个字节为1组(默认)\n:%!xxd -g 4         表示每4个字节为1组\n")])])]),e("h2",{attrs:{id:"_5-vim-配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-vim-配置"}},[t._v("#")]),t._v(" 5. Vim 配置")]),t._v(" "),e("p",[t._v("最初安装的 Vim 功能、特性支持比较少，用起来比较费劲，想要稍微“好用”一点，需做一些初步的配置。Vim 的配置主要分为 Vim 本身特性的配置和外部插件的配置两部分。\nVim 的配置是通常是存放在用户主目录的 "),e("code",[t._v(".vimrc")]),t._v(" 的隐藏文件中的。就 Vim 本身特性来说，基础的配置有编程语言语法高亮、缩进设置、行号显示、搜索高亮、TAB 键设置、字体设置、Vim 主题设置等等，稍微高级一些的有编程语言缩进、自动补全设置等，具体配置项可以自行查资料，全面详细的配置项介绍可以参考：\n《Vim Options》：\n"),e("a",{attrs:{href:"http://vimcdoc.sourceforge.net/doc/options.html#'completeopt'",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://vimcdoc.sourceforge.net/doc/options.html#%27completeopt%27"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"_6-vim-插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-vim-插件"}},[t._v("#")]),t._v(" 6. Vim 插件")]),t._v(" "),e("p",[t._v("Vim“编辑器之神”的称号并不是浪得虚名，然而，这个荣誉的背后，或许近半的功劳要归功于强大的插件支持特性，以及社区开发的各种各样功能强大的插件。")]),t._v(" "),e("p",[t._v("平时开发人员常用插件主要是目录（文件）查看和管理、编程语言缩进与自动补全、编程语言 Docs 支持、函数跳转、项目管理等等，简单配置可以参考下面：")]),t._v(" "),e("p",[t._v("《Vim 插件简单介绍》：\n"),e("a",{attrs:{href:"http://blog.segmentfault.com/xuelang/1190000000630547",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://blog.segmentfault.com/xuelang/1190000000630547"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("《手把手教你把 Vim 改装成一个 IDE 编程环境(图文)》：\n"),e("a",{attrs:{href:"http://blog.csdn.net/wooin/article/details/1858917",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://blog.csdn.net/wooin/article/details/1858917"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("《将 Vim 改造为强大的 IDE》：\n"),e("a",{attrs:{href:"http://www.cnblogs.com/zhangsf/archive/2013/06/13/3134409.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.cnblogs.com/zhangsf/archive/2013/06/13/3134409.html"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("当然，这些插件都是拜 Vim 本身的插件支持特性所赐。Vim 为了支持丰富的第三方插件，自身定义了一套简单的脚本开发语言，供程序员自行开发自己所需要的插件，插件开发介绍可以参考：")]),t._v(" "),e("p",[t._v("《Writing Vim Plugins》：\n"),e("a",{attrs:{href:"http://stevelosh.com/blog/2011/09/writing-vim-plugins/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://stevelosh.com/blog/2011/09/writing-vim-plugins/"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"_7-vim-完整文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-vim-完整文档"}},[t._v("#")]),t._v(" 7. Vim 完整文档")]),t._v(" "),e("ol",[e("li",[t._v("Vim 官方文档："),e("a",{attrs:{href:"http://vimdoc.sourceforge.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://vimdoc.sourceforge.net/"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("Vim 中文用户手册 7_3.pdf ："),e("a",{attrs:{href:"http://pan.baidu.com/s/1jGzbTBo",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://pan.baidu.com/s/1jGzbTBo"),e("OutboundLink")],1)])]),t._v(" "),e("h3",{attrs:{id:"vim-cheat-sheet"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vim-cheat-sheet"}},[t._v("#")]),t._v(" vim cheat-sheet")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://i1.bvimg.com/618609/70bf5a7572d94707.jpg",alt:"vim快捷键"}}),t._v(" "),e("img",{attrs:{src:"http://i1.bvimg.com/618609/b88bd13a8bd121ec.png",alt:"vim键盘图"}})])])}),[],!1,null,null,null);a.default=s.exports}}]);